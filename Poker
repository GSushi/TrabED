/*Restrictions:

1. The only authorized functions libC are printf and scanf.

2. It is prohibited to use loops and while(If you do not know what it is do not worry).

3. Use functions.

 

Stud Poker

The stud poker takes place with a deck of 52 cards. Every card has a value and a color (Spades, Hearts, Clubs, Diamonds). The values are ordered as follows from the weaker to the stronger: from 2 to 10, then Jack, Queen, King, Ace (which is also 1).
In the stud poker, every player has five cards in hand. Five cards of the hand of a player form a combination. Here are the various combinations, classified in increasing order by value:

 

1. High card: None of the following combinations:

2. One pair: two cards of the same value.

3. Two pairs: two times two cards of same value.

4. Three of a kind: Three cards of the same value.

5. Straight: five cards with values in sequence (Ace can also be seen as one, but we must choose: The values "Ace-2-3-4-5" form a sequence, like the values "10 - Jack - Queen - King - Ace ", but, for example, values" King - Ace -2 - 3 - 4 "are not a sequence).

6. Flush(color): Five cards of same color.

7. Full house: three of a kind and one pair.

8. Four of a kind: four cards of the same value.

9. Straight Flush: Straight in which the cards have the same color.

 

If a player has a better combination than the other player, he wins. If the

Both players have the same type of combination, follows the procedure:

 

1. If the players have both a High card, it is the one whose rank the highest card is the highest who wins. In case of equality we also proceed with the rank of the remaining cards, by beginning with the strongest, and by going to the least strong, as long as there is still equality.

 

2. If the players have both either a Three of a kind, or a One pair, or a Four of a kind, it is the one whose rank the highest card is the highest who wins. In case of equality we also proceed with the rank of the remaining cards, by beginning with the strongest, and by going to the least strong, as long as there is still equality.

 

3. If the players have both either one is a Straight, or a Flush, or a Straight flush, it is the one whose rank of the highest card is the highest who wins (for the continuation 1 2 3 4 5, the highest card is 5 but not Ace).

 

4. If the players have both a Full house, it is the one whose rank of the grouping of 3 cards is the highest who wins. In case of equality, we also proceed with the rank of the grouping of 2 cards.

5. If the players have both a Two pairs, it is the one whose rank of the strongest pair is the highest who wins. In case of equality, we also proceed with the rank of the least strong pair. In case of equality we also proceed with the rank of the remaining card.

 

Work

 

A card from a deck of 52 cards will be represented by:

- An int between 1 and 13 for the card value (= 1 Ace, 11 = Jack, 12 =

lQueen and 13 = King) and

- A char for the color of the card 'P' Spades, 'C' to Hearts 'T' for Clubs

and 'K' for Diamonds.

 

 

In poker.c file Write a program which reads on the standard input an integer followed by a character, all ten times. Each integer / character is separated from that post by spaces. The first integer is the value of the first card of the player 1. The first character is the color of the first card of the player 1. The first ten integer / characters are the cards of players 1. The following ten are the cards of player 2. we can assume that what is read from the standard input is still valid. No need to check if the same card appears twice (for example two 3 heart).

The program must then be displayed on a line "Player1 wins / n" if player 1 wins, "Player2 wins / n" if player 2 wins, and "Draw / n" if there is equality.

 

An example of implementation of the program:

$> Gcc -o poker poker.c

$> Echo "1 P 3 P 10 P 12 P 4 P 2 C 3 K 2 P 3 T 3 C" | ./poker | Cate

Player2 wins $

$>

 
In the example above, the first player has a Flush(color) with all his Spades cards. The second has a Full house with 2Hearts, 3Diamonds, 2Spades, 3Clubs and 3Hearts. The Full house takes him on the Flush(color) and thus the player 2 wins.

Tips:

1. Break the problem into sub-problems. Use the functions. For example, a function which turns the card of the highest value, among five values, then an other one which turns the one who is the second highest, then an other one for the third highest, etc.... It could help you order the values of the cards of a game.

 

2. A possibility (but it is not the only one) is to make a function f which in a combination of five cards, associates a value, so that for two combinations c1, c2, we have f (c1) > f (c2) if and only if the combination c1 is better than the combination c2.

And at the moment Iâ€™m here : 

#include <stdio.h>

int fct(int n1, int n2, int n3, int n4, int n5) {
  if (n1 > n2 && n1 > n3 && n1 > n4 && n1 > n5)
    return n1;
  else if (n2 > n1 && n2 > n3 && n2 > n4 && n2 > n5)
    return n2;
  else if (n3 > n1 && n3 > n2 && n3 > n4 && n3 > n5)
    return n3;
  else if (n4 > n1 && n4 > n2 && n4 > n3 && n4 > n5)
    return n4;
  else
    return n5;
}

int main(int argc, char* argv[]) {
  int a1, b1, c1, d1, e1, a2, b2, c2, d2, e2;
  char x1, x2, x3, x4, x5, y1, y2, y3, y4, y5;
  scanf("%d %c %d %c %d %c %d %c %d %c %d %c %d %c %d %c %d %c %d %c", &a1, &x1, &b1, &x2, &c1, &x3, &d1, &x4, &e1, &x5, &a2, &y1, &b2, &y2, &c2, &y3, &d2, &y4, &e2, &y5);

  int res1 = fct(a1, b1, c1, d1, e1);
  int res2 = fct(a2, b2, c2, d2, e2); */
  
  
 
  
  
  
#include<stdio.h>

void take_input();
int is_onepair(int player);
int check_three(int x, int y, int z);
int is_twopair(int player);
int is_tok(int player);
int is_straight(int player);
int is_flush(int player);
int is_fullhouse(int player);
int is_fourofkind(int player);
int is_straight_flush(int player);
int check_player(int player);
int check_winner();


struct card
{
	char color;
	int value;
};
struct card game_card[10];


//function to take input for the cards and convert value of ace to 14 if user enters 1
void take_input(){
	printf("Please enter details of cards\n");

	//as use of loops is restricted

	scanf("%d %c %d %c %d %c %d %c %d %c %d %c %d %c %d %c %d %c %d %c", &game_card[0].value, &game_card[0].color, &game_card[1].value, &game_card[1].color, &game_card[2].value, &game_card[2].color, &game_card[3].value, &game_card[3].color, &game_card[4].value, &game_card[4].color, &game_card[5].value, &game_card[5].color, &game_card[6].value, &game_card[6].color, &game_card[7].value, &game_card[7].color, &game_card[8].value, &game_card[8].color, &game_card[9].value, &game_card[9].color);

	if(game_card[0].value == 1){
		game_card[0].value == 14;
	}

	if(game_card[1].value == 1){
		game_card[1].value == 14;
	}

	if(game_card[2].value == 1){
		game_card[2].value == 14;
	}

	if(game_card[3].value == 1){
		game_card[3].value == 14;
	}

	if(game_card[4].value == 1){
		game_card[4].value == 14;
	}

	if(game_card[5].value == 1){
		game_card[5].value == 14;
	}

	if(game_card[6].value == 1){
		game_card[6].value == 14;
	}

	if(game_card[7].value == 1){
		game_card[7].value == 14;
	}

	if(game_card[8].value == 1){
		game_card[8].value == 14;
	}

	if(game_card[9].value == 1){
		game_card[9].value == 14;
	}


}

//function to check one pair
int is_onepair(int player){
	if (player == 1){
		int a,b,c,d,e;
		a = game_card[0].value;
		b = game_card[1].value;
		c = game_card[2].value;
		d = game_card[3].value;
		e = game_card[4].value;
		if ( a==b || a==c || a==d || a==e || b==c || b==d || b==e || c==d || c==e || d==e){
			return 1;	
		}
		else{
			return 0;
		}
	}
	else{
		int a,b,c,d,e;
		a = game_card[5].value;
		b = game_card[6].value;
		c = game_card[7].value;
		d = game_card[8].value;
		e = game_card[9].value;
		if ( a==b || a==c || a==d || a==e || b==c || b==d || b==e || c==d || c==e || d==e){
			return 1;	
		}
		else{
			return 0;
		}		
	}
}

//function to check if atleast two of three number are equal or not
//this function will be used by the next funtion
int check_three(int x, int y, int z){
	if (x == y || x == z || y==z){
		return 1;
	}
	else{
		return 0;
	}
}

int is_twopair(int player){
	if (player == 1){
		int a,b,c,d,e;
		a = game_card[0].value;
		b = game_card[1].value;
		c = game_card[2].value;
		d = game_card[3].value;
		e = game_card[4].value;
		if ( (a==b) && (check_three(c,d,e) ==1 ) ){
			return 1;
		}
		else if( (a==c) && (check_three(b,d,e) ==1 ) ){
			return 1;
		}
		else if( (a==d) && (check_three(c,b,e) ==1 ) ){
			return 1;
		}
		else if( (a==e) && (check_three(b,c,d) ==1 ) ){
			return 1;
		}
		else if( (b==c) && (check_three(a,d,e) ==1 ) ){
			return 1;
		}
		else if( (b==d) && (check_three(a,c,e) ==1 ) ){
			return 1;
		}
		else if( (b==e) && (check_three(a,c,d) ==1 ) ){
			return 1;
		}
		else if( (c==d) && (check_three(a,b,e) ==1 ) ){
			return 1;
		}
		else if( (c==e) && (check_three(a,b,d) ==1 ) ){
			return 1;
		}
		else if( (d==e) && (check_three(a,b,c) ==1 ) ){
			return 1;
		}
		else{
			return 0;
		}
	}
	else{
		int a,b,c,d,e;
		a = game_card[5].value;
		b = game_card[6].value;
		c = game_card[7].value;
		d = game_card[8].value;
		e = game_card[9].value;
		if ( (a==b) && (check_three(c,d,e) ==1 ) ){
			return 1;
		}
		else if( (a==c) && (check_three(b,d,e) ==1 ) ){
			return 1;
		}
		else if( (a==d) && (check_three(c,b,e) ==1 ) ){
			return 1;
		}
		else if( (a==e) && (check_three(b,c,d) ==1 ) ){
			return 1;
		}
		else if( (b==c) && (check_three(a,d,e) ==1 ) ){
			return 1;
		}
		else if( (b==d) && (check_three(a,c,e) ==1 ) ){
			return 1;
		}
		else if( (b==e) && (check_three(a,c,d) ==1 ) ){
			return 1;
		}
		else if( (c==d) && (check_three(a,b,e) ==1 ) ){
			return 1;
		}
		else if( (c==e) && (check_three(a,b,d) ==1 ) ){
			return 1;
		}
		else if( (d==e) && (check_three(a,b,c) ==1 ) ){
			return 1;
		}
		else{
			return 0;
		}
	}
}

int is_tok(int player){
		if (player == 1){
		int a,b,c,d,e;
		a = game_card[0].value;
		b = game_card[1].value;
		c = game_card[2].value;
		d = game_card[3].value;
		e = game_card[4].value;
		if ( (a==b && b==c) || (a==b && b==d) || (a==b && b==e) || (a==c && c==d) || (a==c && c==e) || (a==d && d==e) || (b==c && c==d) || (b==c && c==e) || (b==d && d==e) ||(c==d && d==e)){
			return 1;
		}
		else{
			return 0;
		}
	}
	else{
		int a,b,c,d,e;
		a = game_card[5].value;
		b = game_card[6].value;
		c = game_card[7].value;
		d = game_card[8].value;
		e = game_card[9].value;
		if ( (a==b && b==c) || (a==b && b==d) || (a==b && b==e) || (a==c && c==d) || (a==c && c==e) || (a==d && d==e) || (b==c && c==d) || (b==c && c==e) || (b==d && d==e) ||(c==d && d==e)){
			return 1;
		}
		else{
			return 0;
		}
	}
}

//function to check straight
int is_straight(int player){
	if (player == 1){
		int a,b,c,d;
		a = game_card[0].value+4;
		b = game_card[1].value+3;
		c = game_card[2].value+2;
		d = game_card[3].value+1;
		if( a==b && b==c && c==d && d==game_card[4].value ){
			return 1;
		}
		else{
			return 0;
		}
	}
	else{
		int a,b,c,d;
		a = game_card[5].value+4;
		b = game_card[6].value+3;
		c = game_card[7].value+2;
		d = game_card[8].value+1;
		if( a==b && b==c && c==d && d==game_card[9].value ){
			return 1;
		}
		else{
			return 0;
		}
	}
}

int is_flush(int player){
	if(player == 1){
		int a,b,c,d;
		a = game_card[0].color;
		b = game_card[1].color;
		c = game_card[2].color;
		d = game_card[3].color;
		if( a==b && b==c && c==d && d==game_card[4].color ){
			return 1;
		}
		else{
			return 0;
		}
	}
	else{
		int a,b,c,d;
		a = game_card[5].color;
		b = game_card[6].color;
		c = game_card[7].color;
		d = game_card[8].color;
		if( a==b && b==c && c==d && d==game_card[9].color ){
			return 1;
		}
		else{
			return 0;
		}
	}
}

int is_fullhouse(int player){
	if(player == 1){
		if( (is_tok(1) == 1) && (is_onepair(1)==1) ){
			return 1;
		}
		else{
			return 0;
		}
	}
	else{
		if( (is_tok(2) == 1) && (is_onepair(2)==1) ){
			return 1;
		}
		else{
			return 0;
		}
	}
}

int is_fourofkind(int player){
	if(player == 1){
		int a,b,c,d,e;
		a = game_card[0].value;
		b = game_card[1].value;
		c = game_card[2].value;
		d = game_card[3].value;
		e = game_card[4].value;
		if ((a==b && b==c && c==d)||(b==c && c==d && d==e)|| (c==d && d==e && e==a) || (d==e && e==a && a==b) || (e==a && a==b && b==c)){
			return 1;
		}
		else{
			return 0;
		}
	}
	else{
		int a,b,c,d,e;
		a = game_card[5].value;
		b = game_card[6].value;
		c = game_card[7].value;
		d = game_card[8].value;
		e = game_card[9].value;
		if ((a==b && b==c && c==d)||(b==c && c==d && d==e)|| (c==d && d==e && e==a) || (d==e && e==a && a==b) || (e==a && a==b && b==c)){
			return 1;
		}
		else{
			return 0;
		}
	}
}

int is_straight_flush(int player){
	if(player == 1){
		if ( (is_flush(1) == 1)&&(is_straight(1) == 1) ){
			return 1;
		}
		else{
			return 0;
		}
	}
	else{
		if ( (is_flush(2) == 1)&&(is_straight(2) == 1) ){
			return 1;
		}
		else{
			return 0;
		}
	}
}


//function to check combination of player
//functions returns 1 for high card, 2->One pair and so on.
int check_player(int player){
	int combi = 1;
	if(is_straight_flush(player) == 1){
		combi = 9;
	}
	else if(is_fourofkind(player) == 1){
		combi = 8;
	}
	else if(is_fullhouse(player) == 1){
		combi = 7;
	}
	else if(is_flush(player) == 1){
		combi = 6;
	}
	else if(is_straight(player) == 1){
		combi = 5;
	}
	else if(is_tok(player) == 1){
		combi = 4;
	}
	else if(is_twopair(player) == 1){
		combi = 3;
	}
	else if(is_onepair(player) == 1){
		combi = 2;
	}
	return combi;	
}

int check_winner(){
	if (check_player(1)>check_player(2)){
		return 1;
	}
	else if (check_player(2)>check_player(1)){
		return 2;
	}
	else{
		//do yourself
	}
}

//main function
main()
{
	take_input();
	if (check_winner() == 1){
		printf("Player 1 wins\n");
	}
	else{
		printf("Player 2 wins\n");
	}
}
